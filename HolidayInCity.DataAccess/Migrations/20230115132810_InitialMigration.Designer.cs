// <auto-generated />
using System;
using HolidayInCity.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HolidayInCity.DataAccess.Migrations
{
    [DbContext(typeof(HolidayInCityDbContext))]
    [Migration("20230115132810_InitialMigration")]
    partial class InitialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("HolidayInCity.DataAccess.Entities.EventOrganizer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("EventOrganizers");
                });

            modelBuilder.Entity("HolidayInCity.DataAccess.Entities.EventOrganizerAddress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EventOrganizerId")
                        .HasColumnType("int");

                    b.Property<string>("PostCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StreetNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EventOrganizerId");

                    b.ToTable("EventOrganizerAddresses");
                });

            modelBuilder.Entity("HolidayInCity.DataAccess.Entities.EventOrganizerContact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EventOrganizerId")
                        .HasColumnType("int");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EventOrganizerId");

                    b.ToTable("EventOrganizerContacts");
                });

            modelBuilder.Entity("HolidayInCity.DataAccess.Entities.HolidayEvent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("EventOrganizerId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("EventOrganizerId");

                    b.ToTable("HolidayEvents");
                });

            modelBuilder.Entity("HolidayInCity.DataAccess.Entities.EventOrganizerAddress", b =>
                {
                    b.HasOne("HolidayInCity.DataAccess.Entities.EventOrganizer", "EventOrganizer")
                        .WithMany("EventOrganizerAddresses")
                        .HasForeignKey("EventOrganizerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EventOrganizer");
                });

            modelBuilder.Entity("HolidayInCity.DataAccess.Entities.EventOrganizerContact", b =>
                {
                    b.HasOne("HolidayInCity.DataAccess.Entities.EventOrganizer", "EventOrganizer")
                        .WithMany("EventOrganizerContacts")
                        .HasForeignKey("EventOrganizerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EventOrganizer");
                });

            modelBuilder.Entity("HolidayInCity.DataAccess.Entities.HolidayEvent", b =>
                {
                    b.HasOne("HolidayInCity.DataAccess.Entities.EventOrganizer", "EventOrganizer")
                        .WithMany("HolidayEvents")
                        .HasForeignKey("EventOrganizerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EventOrganizer");
                });

            modelBuilder.Entity("HolidayInCity.DataAccess.Entities.EventOrganizer", b =>
                {
                    b.Navigation("EventOrganizerAddresses");

                    b.Navigation("EventOrganizerContacts");

                    b.Navigation("HolidayEvents");
                });
#pragma warning restore 612, 618
        }
    }
}
